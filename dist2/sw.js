(()=>{"use strict";var e={437:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,a,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,a=0,o=t.length;a<o;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncContract=void 0;var o=r(8),i=r(527);t.AsyncContract=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.length-1,c=e.slice(0,r),u=e[r];return{enforce:function(e){return function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];if(t.length<c.length){var l="Expected ".concat(c.length," arguments but only received ").concat(t.length),s=i.FAILURE.ARGUMENT_INCORRECT(l);throw new o.ValidationError(s)}for(var f=0;f<c.length;f++)c[f].check(t[f]);var d=e.apply(void 0,a([],n(t),!1));if(!(d instanceof Promise))throw l="Expected function to return a promise, but instead got ".concat(d),s=i.FAILURE.RETURN_INCORRECT(l),new o.ValidationError(s);return d.then(u.check)}}}}},713:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,a,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,a=0,o=t.length;a<o;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.Contract=void 0;var o=r(8),i=r(527);t.Contract=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.length-1,c=e.slice(0,r),u=e[r];return{enforce:function(e){return function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];if(t.length<c.length){var l="Expected ".concat(c.length," arguments but only received ").concat(t.length),s=i.FAILURE.ARGUMENT_INCORRECT(l);throw new o.ValidationError(s)}for(var f=0;f<c.length;f++)c[f].check(t[f]);return u.check(e.apply(void 0,a([],n(t),!1)))}}}}},74:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checked=t.check=void 0;var n=r(8),a=r(527),o=new WeakMap;t.check=function(e,t,r){var n=o.get(e)||new Map;o.set(e,n);var a=n.get(t)||[];n.set(t,a),a.push(r)},t.checked=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(0===e.length)throw new Error("No runtype provided to `@checked`. Please remove the decorator.");return function(t,r,i){var c=i.value,u=(t.name||t.constructor.name+".prototype")+("string"==typeof r?'["'.concat(r,'"]'):"[".concat(String(r),"]")),l=function(e,t,r){var n=o.get(e),a=n&&n.get(t);if(a)return a;for(var i=[],c=0;c<r;c++)i.push(c);return i}(t,r,e.length);if(l.length!==e.length)throw new Error("Number of `@checked` runtypes and @check parameters not matched.");if(l.length>c.length)throw new Error("Number of `@checked` runtypes exceeds actual parameter length.");i.value=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.forEach((function(e,r){var o=l[r],i=e.validate(t[o]);if(!i.success){var c="".concat(u,", argument #").concat(o,": ").concat(i.message),s=a.FAILURE.ARGUMENT_INCORRECT(c);throw new n.ValidationError(s)}})),c.apply(this,t)}}}},8:function(e,t){var r,n=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ValidationError=void 0;var a=function(e){function t(r){var n=e.call(this,r.message)||this;return n.name="ValidationError",n.code=r.code,void 0!==r.details&&(n.details=r.details),Object.setPrototypeOf(n,t.prototype),n}return n(t,e),t}(Error);t.ValidationError=a},167:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.InstanceOf=t.Nullish=t.Null=t.Undefined=t.Literal=void 0,a(r(450),t),a(r(486),t),a(r(713),t),a(r(437),t),a(r(558),t),a(r(8),t),a(r(939),t),a(r(783),t),a(r(607),t);var o=r(449);Object.defineProperty(t,"Literal",{enumerable:!0,get:function(){return o.Literal}}),Object.defineProperty(t,"Undefined",{enumerable:!0,get:function(){return o.Undefined}}),Object.defineProperty(t,"Null",{enumerable:!0,get:function(){return o.Null}}),Object.defineProperty(t,"Nullish",{enumerable:!0,get:function(){return o.Nullish}}),a(r(855),t),a(r(513),t),a(r(56),t),a(r(218),t),a(r(604),t),a(r(977),t),a(r(764),t),a(r(215),t),a(r(675),t),a(r(109),t),a(r(518),t),a(r(12),t),a(r(97),t),a(r(93),t);var i=r(27);Object.defineProperty(t,"InstanceOf",{enumerable:!0,get:function(){return i.InstanceOf}}),a(r(475),t),a(r(526),t),a(r(424),t),a(r(74),t)},558:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,a,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,"__esModule",{value:!0}),t.when=t.match=void 0,t.match=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){var a,o;try{for(var i=r(e),c=i.next();!c.done;c=i.next()){var u=n(c.value,2),l=u[0],s=u[1];if(l.guard(t))return s(t)}}catch(e){a={error:e}}finally{try{c&&!c.done&&(o=i.return)&&o.call(i)}finally{if(a)throw a.error}}throw new Error("No alternatives were matched")}},t.when=function(e,t){return[e,t]}},450:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},486:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Failcode=void 0,t.Failcode={TYPE_INCORRECT:"TYPE_INCORRECT",VALUE_INCORRECT:"VALUE_INCORRECT",KEY_INCORRECT:"KEY_INCORRECT",CONTENT_INCORRECT:"CONTENT_INCORRECT",ARGUMENT_INCORRECT:"ARGUMENT_INCORRECT",RETURN_INCORRECT:"RETURN_INCORRECT",CONSTRAINT_FAILED:"CONSTRAINT_FAILED",PROPERTY_MISSING:"PROPERTY_MISSING",PROPERTY_PRESENT:"PROPERTY_PRESENT",NOTHING_EXPECTED:"NOTHING_EXPECTED"}},794:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.innerValidate=t.create=t.isRuntype=void 0;var n=r(167),a=r(830),o=r(8),i=r(527),c=Symbol();t.isRuntype=function(e){return(0,i.hasKey)(c,e)},t.create=function(e,t){return t[c]=!0,t.check=r,t.assert=r,t._innerValidate=function(r,n){return n.has(r,t)?(0,i.SUCCESS)(r):e(r,n)},t.validate=function(e){return t._innerValidate(e,(r=new WeakMap,n=function(e,t){if(null!==e&&"object"==typeof e){var n=r.get(e);r.set(e,n?n.set(t,!0):(new WeakMap).set(t,!0))}},a=function(e,t){var a=r.get(e),o=a&&a.get(t)||!1;return n(e,t),o},{has:a}));var r,n,a},t.guard=function(e){return t.validate(e).success},t.Or=function(e){return(0,n.Union)(t,e)},t.And=function(e){return(0,n.Intersect)(t,e)},t.optional=function(){return(0,n.Optional)(t)},t.nullable=function(){return(0,n.Union)(t,n.Null)},t.withConstraint=function(e,r){return(0,n.Constraint)(t,e,r)},t.withGuard=function(e,r){return(0,n.Constraint)(t,e,r)},t.withBrand=function(e){return(0,n.Brand)(e,t)},t.reflect=t,t.toString=function(){return"Runtype<".concat((0,a.default)(t),">")},t;function r(e){var r=t.validate(e);if(r.success)return r.value;throw new o.ValidationError(r)}},t.innerValidate=function(e,t,r){return e._innerValidate(t,r)}},830:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return function(t){switch(t.tag){case"literal":return'"'.concat(String(t.value),'"');case"string":return"string";case"brand":return t.brand;case"constraint":return t.name||r(e)(t.underlying);case"union":return t.alternatives.map(r(e)).join(" | ");case"intersect":return t.intersectees.map(r(e)).join(" & ")}return"`${".concat(a(!1,e)(t),"}`")}},n=function(e){return function(t){switch(t.tag){case"literal":return String(t.value);case"brand":return"${".concat(t.brand,"}");case"constraint":return t.name?"${".concat(t.name,"}"):n(e)(t.underlying);case"union":if(1===t.alternatives.length){var r=t.alternatives[0];return n(e)(r.reflect)}break;case"intersect":if(1===t.intersectees.length)return r=t.intersectees[0],n(e)(r.reflect)}return"${".concat(a(!1,e)(t),"}")}},a=function(e,t){return function(i){var c=function(t){return e?"(".concat(t,")"):t};if(t.has(i))return c("CIRCULAR ".concat(i.tag));t.add(i);try{switch(i.tag){case"unknown":case"never":case"void":case"boolean":case"number":case"bigint":case"string":case"symbol":case"function":return i.tag;case"literal":var u=i.value;return"string"==typeof u?'"'.concat(u,'"'):String(u);case"template":if(0===i.strings.length)return'""';if(1===i.strings.length)return'"'.concat(i.strings[0],'"');if(2===i.strings.length&&i.strings.every((function(e){return""===e}))){var l=i.runtypes[0];return r(t)(l.reflect)}var s=!1,f=i.strings.reduce((function(e,r,a){var o=e+r,c=i.runtypes[a];if(c){var u=n(t)(c.reflect);return!s&&u.startsWith("$")&&(s=!0),o+u}return o}),"");return s?"`".concat(f,"`"):'"'.concat(f,'"');case"array":return"".concat(o(i)).concat(a(!0,t)(i.element),"[]");case"dictionary":return"{ [_: ".concat(i.key,"]: ").concat(a(!1,t)(i.value)," }");case"record":var d=Object.keys(i.fields);return d.length?"{ ".concat(d.map((function(e){return"".concat(o(i)).concat(e).concat((r=i,n=e,c=r.isPartial,u=r.fields,c||void 0!==n&&"optional"===u[n].tag?"?":""),": ").concat("optional"===i.fields[e].tag?a(!1,t)(i.fields[e].underlying):a(!1,t)(i.fields[e]),";");var r,n,c,u})).join(" ")," }"):"{}";case"tuple":return"[".concat(i.components.map(a(!1,t)).join(", "),"]");case"union":return c("".concat(i.alternatives.map(a(!0,t)).join(" | ")));case"intersect":return c("".concat(i.intersectees.map(a(!0,t)).join(" & ")));case"optional":return a(e,t)(i.underlying)+" | undefined";case"constraint":return i.name||a(e,t)(i.underlying);case"instanceof":return i.ctor.name;case"brand":return a(e,t)(i.entity)}}finally{t.delete(i)}throw Error("impossible")}};function o(e){return e.isReadonly?"readonly ":""}t.default=a(!1,new Set)},764:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Array=void 0;var n=r(794),a=r(527);function o(e,t){var r,i={tag:"array",isReadonly:t,element:e};return(r=(0,n.create)((function(t,r){if(!Array.isArray(t))return a.FAILURE.TYPE_INCORRECT(i,t);var o=(0,a.enumerableKeysOf)(t),c=o.map((function(a){return(0,n.innerValidate)(e,t[a],r)})),u=o.reduce((function(e,t){var r=c[t];return r.success||(e[t]=r.details||r.message),e}),[]);return 0!==(0,a.enumerableKeysOf)(u).length?a.FAILURE.CONTENT_INCORRECT(i,u):(0,a.SUCCESS)(t)}),i)).asReadonly=function(){return o(r.element,!0)},r}t.Array=function(e){return o(e,!1)}},218:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BigInt=void 0;var n=r(794),a=r(527),o={tag:"bigint"};t.BigInt=(0,n.create)((function(e){return"bigint"==typeof e?(0,a.SUCCESS)(e):a.FAILURE.TYPE_INCORRECT(o,e)}),o)},513:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Boolean=void 0;var n=r(794),a=r(527),o={tag:"boolean"};t.Boolean=(0,n.create)((function(e){return"boolean"==typeof e?(0,a.SUCCESS)(e):a.FAILURE.TYPE_INCORRECT(o,e)}),o)},424:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Brand=void 0;var n=r(794);t.Brand=function(e,t){var r={tag:"brand",brand:e,entity:t};return(0,n.create)((function(e){return t.validate(e)}),r)}},526:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Guard=t.Constraint=void 0;var n=r(794),a=r(527),o=r(939);t.Constraint=function(e,t,r){var o=r&&r.name,i=r&&r.args,c={tag:"constraint",underlying:e,constraint:t,name:o,args:i};return(0,n.create)((function(r){var n=e.validate(r);if(!n.success)return n;var o=t(n.value);return"string"==typeof o?a.FAILURE.CONSTRAINT_FAILED(c,o):o?(0,a.SUCCESS)(n.value):a.FAILURE.CONSTRAINT_FAILED(c)}),c)},t.Guard=function(e,t){return o.Unknown.withGuard(e,t)}},109:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Dictionary=void 0;var n=r(794),a=r(604),o=r(526),i=r(830),c=r(527),u=(0,o.Constraint)(a.String,(function(e){return!isNaN(+e)}),{name:"number"});t.Dictionary=function(e,t){var r=void 0===t||"string"===t?a.String:"number"===t?u:t,o=(0,i.default)(r),l={tag:"dictionary",key:o,value:e};return(0,n.create)((function(t,a){if(null==t||"object"!=typeof t)return c.FAILURE.TYPE_INCORRECT(l,t);if(Object.getPrototypeOf(t)!==Object.prototype&&(!Array.isArray(t)||"string"===o))return c.FAILURE.TYPE_INCORRECT(l,t);var i=/^(?:NaN|-?\d+(?:\.\d+)?)$/,u=(0,c.enumerableKeysOf)(t),s=u.reduce((function(o,u){var s="string"==typeof u&&i.test(u),f=s?globalThis.Number(u):u;return(s?r.guard(f)||r.guard(u):r.guard(f))?o[u]=(0,n.innerValidate)(e,t[u],a):o[u]=c.FAILURE.KEY_INCORRECT(l,r.reflect,f),o}),{}),f=u.reduce((function(e,t){var r=s[t];return r.success||(e[t]=r.details||r.message),e}),{});return 0!==(0,c.enumerableKeysOf)(f).length?c.FAILURE.CONTENT_INCORRECT(l,f):(0,c.SUCCESS)(t)}),l)}},93:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Function=void 0;var n=r(794),a=r(527),o={tag:"function"};t.Function=(0,n.create)((function(e){return"function"==typeof e?(0,a.SUCCESS)(e):a.FAILURE.TYPE_INCORRECT(o,e)}),o)},27:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InstanceOf=void 0;var n=r(794),a=r(527);t.InstanceOf=function(e){var t={tag:"instanceof",ctor:e};return(0,n.create)((function(r){return r instanceof e?(0,a.SUCCESS)(r):a.FAILURE.TYPE_INCORRECT(t,r)}),t)}},12:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Intersect=void 0;var a=r(794),o=r(527);t.Intersect=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r={tag:"intersect",intersectees:e};return(0,a.create)((function(t,r){var i,c;try{for(var u=n(e),l=u.next();!l.done;l=u.next()){var s=l.value,f=(0,a.innerValidate)(s,t,r);if(!f.success)return f}}catch(e){i={error:e}}finally{try{l&&!l.done&&(c=u.return)&&c.call(u)}finally{if(i)throw i.error}}return(0,o.SUCCESS)(t)}),r)}},475:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Lazy=void 0;var n=r(794);t.Lazy=function(e){var t,r={get tag(){return a().tag}};function a(){if(!t)for(var n in t=e())"tag"!==n&&(r[n]=t[n]);return t}return(0,n.create)((function(e){return a().validate(e)}),r)}},449:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Nullish=t.Null=t.Undefined=t.Literal=t.literal=void 0;var n=r(794),a=r(527),o=r(518);function i(e){return Array.isArray(e)?String(e.map(String)):"bigint"==typeof e?String(e)+"n":String(e)}function c(e){var t={tag:"literal",value:e};return(0,n.create)((function(t){return t===e?(0,a.SUCCESS)(t):a.FAILURE.VALUE_INCORRECT("literal","`".concat(i(e),"`"),"`".concat(i(t),"`"))}),t)}t.literal=i,t.Literal=c,t.Undefined=c(void 0),t.Null=c(null),t.Nullish=(0,o.Union)(t.Null,t.Undefined)},783:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Never=void 0;var n=r(794),a=r(527);t.Never=(0,n.create)(a.FAILURE.NOTHING_EXPECTED,{tag:"never"})},56:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Number=void 0;var n=r(794),a=r(527),o={tag:"number"};t.Number=(0,n.create)((function(e){return"number"==typeof e?(0,a.SUCCESS)(e):a.FAILURE.TYPE_INCORRECT(o,e)}),o)},97:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Optional=void 0;var n=r(794),a=r(527);t.Optional=function(e){var t={tag:"optional",underlying:e};return(0,n.create)((function(t){return void 0===t?(0,a.SUCCESS)(t):e.validate(t)}),t)}},675:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,a,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,a=0,o=t.length;a<o;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.Partial=t.Record=t.InternalRecord=void 0;var o=r(794),i=r(527);function c(e,t,r){var u,l={tag:"record",isPartial:t,isReadonly:r,fields:e};return(u=(0,o.create)((function(r,c){if(null==r)return i.FAILURE.TYPE_INCORRECT(l,r);var u=(0,i.enumerableKeysOf)(e);if(0!==u.length&&"object"!=typeof r)return i.FAILURE.TYPE_INCORRECT(l,r);var s=a([],n(new Set(a(a([],n(u),!1),n((0,i.enumerableKeysOf)(r)),!1))),!1),f=s.reduce((function(n,a){var u=(0,i.hasKey)(a,e),l=(0,i.hasKey)(a,r);if(u){var s=e[a],f=t||"optional"===s.reflect.tag;if(l){var d=r[a];n[a]=f&&void 0===d?(0,i.SUCCESS)(d):(0,o.innerValidate)(s,d,c)}else n[a]=f?(0,i.SUCCESS)(void 0):i.FAILURE.PROPERTY_MISSING(s.reflect)}else{if(!l)throw new Error("impossible");d=r[a],n[a]=(0,i.SUCCESS)(d)}return n}),{}),d=s.reduce((function(e,t){var r=f[t];return r.success||(e[t]=r.details||r.message),e}),{});return 0!==(0,i.enumerableKeysOf)(d).length?i.FAILURE.CONTENT_INCORRECT(l,d):(0,i.SUCCESS)(r)}),l)).asPartial=function(){return c(u.fields,!0,u.isReadonly)},u.asReadonly=function(){return c(u.fields,u.isPartial,!0)},u.pick=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r={};return e.forEach((function(e){r[e]=u.fields[e]})),c(r,u.isPartial,u.isReadonly)},u.omit=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r={};return(0,i.enumerableKeysOf)(u.fields).forEach((function(t){e.includes(t)||(r[t]=u.fields[t])})),c(r,u.isPartial,u.isReadonly)},u.extend=function(e){return c(Object.assign({},u.fields,e),u.isPartial,u.isReadonly)},u}t.InternalRecord=c,t.Record=function(e){return c(e,!1,!1)},t.Partial=function(e){return c(e,!0,!1)}},604:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.String=void 0;var n=r(794),a=r(527),o={tag:"string"};t.String=(0,n.create)((function(e){return"string"==typeof e?(0,a.SUCCESS)(e):a.FAILURE.TYPE_INCORRECT(o,e)}),o)},977:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Symbol=void 0;var n=r(794),a=r(527),o={tag:"symbol"};t.Symbol=(0,n.create)((function(e){return"symbol"==typeof e?(0,a.SUCCESS)(e):a.FAILURE.TYPE_INCORRECT(o,e)}),Object.assign((function(e){var t={tag:"symbol",key:e};return(0,n.create)((function(r){if("symbol"!=typeof r)return a.FAILURE.TYPE_INCORRECT(t,r);var n=globalThis.Symbol.keyFor(r);return n!==e?a.FAILURE.VALUE_INCORRECT("symbol key",i(e),i(n)):(0,a.SUCCESS)(r)}),t)}),o));var i=function(e){return void 0===e?"undefined":'"'.concat(e,'"')}},855:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,a,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,a=0,o=t.length;a<o;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Template=void 0;var i=r(794),c=r(830),u=r(527),l=r(449),s=function(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},f=function(e){switch(e.reflect.tag){case"literal":return e;case"brand":return f(e.reflect.entity);case"union":if(1===e.reflect.alternatives.length)return f(e.reflect.alternatives[0]);break;case"intersect":if(1===e.reflect.intersectees.length)return f(e.reflect.intersectees[0])}throw void 0},d=function(e){return e},v={string:[function(e){return globalThis.String(e)},".*"],number:[function(e){return globalThis.Number(e)},"[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:[Ee][+-]?\\d+)?","0[Bb][01]+","0[Oo][0-7]+","0[Xx][0-9A-Fa-f]+"],bigint:[function(e){return globalThis.BigInt(e)},"-?[1-9]d*"],boolean:[function(e){return"false"!==e},"true","false"],null:[function(){return null},"null"],undefined:[function(){},"undefined"]},y=function(e){switch(e.tag){case"literal":return n(v[(0,u.typeOf)(e.value)]||[d],1)[0];case"brand":return y(e.entity);case"constraint":return y(e.underlying);case"union":return e.alternatives.map(y);case"intersect":return e.intersectees.map(y);default:return n(v[e.tag]||[d],1)[0]}},h=function(e,t){return function(r){var n,a,c,s,f=y(e);if(!Array.isArray(f)){var d=f;return(C=(0,i.innerValidate)(e,d(r),t)).success||"VALUE_INCORRECT"!==C.code||"literal"!==e.tag?C:u.FAILURE.VALUE_INCORRECT("literal",'"'.concat((0,l.literal)(e.value),'"'),'"'.concat(r,'"'))}switch(e.tag){case"union":try{for(var v=o(e.alternatives),g=v.next();!g.done;g=v.next()){var p=g.value;if((C=h(p.reflect,t)(r)).success)return C}}catch(e){n={error:e}}finally{try{g&&!g.done&&(a=v.return)&&a.call(v)}finally{if(n)throw n.error}}return u.FAILURE.TYPE_INCORRECT(e,r);case"intersect":try{for(var E=o(e.intersectees),R=E.next();!R.done;R=E.next()){var C,b=R.value;if(!(C=h(b.reflect,t)(r)).success)return C}}catch(e){c={error:e}}finally{try{R&&!R.done&&(s=E.return)&&s.call(E)}finally{if(c)throw c.error}}return(0,u.SUCCESS)(r);default:throw Error("impossible")}}},g=function(e){switch(e.tag){case"literal":return s(String(e.value));case"brand":return g(e.entity);case"constraint":return g(e.underlying);case"union":return e.alternatives.map(g).join("|");case"template":return e.strings.map(s).reduce((function(t,r,n){var a=t+r,o=e.runtypes[n];return o?a+"(?:".concat(g(o.reflect),")"):a}),"");default:return n(v[e.tag]||[void 0,".*"]).slice(1).join("|")}};t.Template=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r,o,d=n(function(e){var t=n(function(e){if(0<e.length&&Array.isArray(e[0])){var t=n(e),r=t[0],a=t.slice(1);return[Array.from(r),a]}var o=e;return[r=o.reduce((function(e,t){return(0,i.isRuntype)(t)?e.push(""):e.push(e.pop()+String(t)),e}),[""]),a=o.filter(i.isRuntype)]}(e),2),r=t[0],o=t[1];return function(e,t){for(var r=0;r<t.length;)switch(t[r].reflect.tag){case"literal":var o=t[r];t.splice(r,1);var i=String(o.value);e.splice(r,2,e[r]+i+e[r+1]);break;case"template":var c=t[r];t.splice.apply(t,a([r,1],n(c.runtypes),!1));var u=c.strings;if(1===u.length)e.splice(r,2,e[r]+u[0]+e[r+1]);else{var l=u[0],s=u.slice(1,-1),d=u[u.length-1];e.splice.apply(e,a(a([r,2,e[r]+l],n(s),!1),[d+e[r+1]],!1))}break;case"union":var v=t[r];if(1!==v.alternatives.length){r++;break}try{var y=f(v);t.splice(r,1),i=String(y.value),e.splice(r,2,e[r]+i+e[r+1]);break}catch(e){r++;break}case"intersect":var h=t[r];if(1!==h.intersectees.length){r++;break}try{var g=f(h);t.splice(r,1),i=String(g.value),e.splice(r,2,e[r]+i+e[r+1]);break}catch(e){r++;break}default:r++}}(r,o),[r,o]}(e),2),v=d[0],y=d[1],p={tag:"template",strings:v,runtypes:y},E=(o=(r=p).strings.map(s).reduce((function(e,t,n){var a=e+t,o=r.runtypes[n];return o?a+"(".concat(g(o.reflect),")"):a}),""),new RegExp("^".concat(o,"$"),"su"));return(0,i.create)((function(e,t){if("string"!=typeof e)return u.FAILURE.TYPE_INCORRECT(p,e);var r=function(e,t){var r=e.match(E);if(r){for(var n=r.slice(1),a=0;a<y.length;a++){var o=y[a],i=n[a],s=h(o.reflect,t)(i);if(!s.success)return s}return(0,u.SUCCESS)(e)}return u.FAILURE.VALUE_INCORRECT("string","".concat((0,c.default)(p)),'"'.concat((0,l.literal)(e),'"'))}(e,t);if(r.success)return(0,u.SUCCESS)(e);var n=u.FAILURE.VALUE_INCORRECT("string","".concat((0,c.default)(p)),'"'.concat(e,'"'));return n.message!==r.message&&(n.message+=" (inner: ".concat(r.message,")")),n}),p)}},215:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Tuple=void 0;var n=r(794),a=r(527);t.Tuple=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r={tag:"tuple",components:e};return(0,n.create)((function(t,o){if(!Array.isArray(t))return a.FAILURE.TYPE_INCORRECT(r,t);if(t.length!==e.length)return a.FAILURE.CONSTRAINT_FAILED(r,"Expected length ".concat(e.length,", but was ").concat(t.length));var i=(0,a.enumerableKeysOf)(t),c=i.map((function(r){return(0,n.innerValidate)(e[r],t[r],o)})),u=i.reduce((function(e,t){var r=c[t];return r.success||(e[t]=r.details||r.message),e}),[]);return 0!==(0,a.enumerableKeysOf)(u).length?a.FAILURE.CONTENT_INCORRECT(r,u):(0,a.SUCCESS)(t)}),r)}},518:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Union=void 0;var a=r(794),o=r(527);t.Union=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r={tag:"union",alternatives:e,match:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return function(r){for(var n=0;n<e.length;n++)if(e[n].guard(r))return t[n](r)}}};return(0,a.create)((function(t,i){var c,u,l,s,f,d,v,y;if("object"!=typeof t||null===t){try{for(var h=n(e),g=h.next();!g.done;g=h.next()){var p=g.value;if((0,a.innerValidate)(p,t,i).success)return(0,o.SUCCESS)(t)}}catch(e){c={error:e}}finally{try{g&&!g.done&&(u=h.return)&&u.call(h)}finally{if(c)throw c.error}}return o.FAILURE.TYPE_INCORRECT(r,t)}var E={};try{for(var R=n(e),C=R.next();!C.done;C=R.next())if("record"===(p=C.value).reflect.tag){var b=function(e){var t=p.reflect.fields[e];"literal"===t.tag&&(E[e]?E[e].every((function(e){return e!==t.value}))&&E[e].push(t.value):E[e]=[t.value])};for(var _ in p.reflect.fields)b(_)}}catch(e){l={error:e}}finally{try{C&&!C.done&&(s=R.return)&&s.call(R)}finally{if(l)throw l.error}}for(var _ in E)if(E[_].length===e.length)try{for(var O=(f=void 0,n(e)),S=O.next();!S.done;S=O.next())if("record"===(p=S.value).reflect.tag){var T=p.reflect.fields[_];if("literal"===T.tag&&(0,o.hasKey)(_,t)&&t[_]===T.value)return(0,a.innerValidate)(p,t,i)}}catch(e){f={error:e}}finally{try{S&&!S.done&&(d=O.return)&&d.call(O)}finally{if(f)throw f.error}}try{for(var m=n(e),I=m.next();!I.done;I=m.next()){var N=I.value;if((0,a.innerValidate)(N,t,i).success)return(0,o.SUCCESS)(t)}}catch(e){v={error:e}}finally{try{I&&!I.done&&(y=m.return)&&y.call(m)}finally{if(v)throw v.error}}return o.FAILURE.TYPE_INCORRECT(r,t)}),r)}},939:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Unknown=void 0;var n=r(794),a=r(527);t.Unknown=(0,n.create)((function(e){return(0,a.SUCCESS)(e)}),{tag:"unknown"})},607:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Void=void 0;var n=r(939);t.Void=n.Unknown},527:function(e,t,r){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.FAILURE=t.SUCCESS=t.enumerableKeysOf=t.typeOf=t.hasKey=void 0;var a=r(486),o=r(830);t.hasKey=function(e,t){return"object"==typeof t&&null!==t&&e in t},t.typeOf=function(e){var t,r,n;return"object"==typeof e?null===e?"null":Array.isArray(e)?"array":"Object"===(null===(t=e.constructor)||void 0===t?void 0:t.name)?"object":null!==(n=null===(r=e.constructor)||void 0===r?void 0:r.name)&&void 0!==n?n:typeof e:typeof e},t.enumerableKeysOf=function(e){return"object"==typeof e&&null!==e?Reflect.ownKeys(e).filter((function(t){var r,n;return null===(n=null===(r=e.propertyIsEnumerable)||void 0===r?void 0:r.call(e,t))||void 0===n||n})):[]},t.SUCCESS=function(e){return{success:!0,value:e}},t.FAILURE=Object.assign((function(e,t,r){return n({success:!1,code:e,message:t},r?{details:r}:{})}),{TYPE_INCORRECT:function(e,r){var n="Expected ".concat("template"===e.tag?"string ".concat((0,o.default)(e)):(0,o.default)(e),", but was ").concat((0,t.typeOf)(r));return(0,t.FAILURE)(a.Failcode.TYPE_INCORRECT,n)},VALUE_INCORRECT:function(e,r,n){return(0,t.FAILURE)(a.Failcode.VALUE_INCORRECT,"Expected ".concat(e," ").concat(String(r),", but was ").concat(String(n)))},KEY_INCORRECT:function(e,r,n){return(0,t.FAILURE)(a.Failcode.KEY_INCORRECT,"Expected ".concat((0,o.default)(e)," key to be ").concat((0,o.default)(r),", but was ").concat((0,t.typeOf)(n)))},CONTENT_INCORRECT:function(e,r){var n=JSON.stringify(r,null,2).replace(/^ *null,\n/gm,""),i="Validation failed:\n".concat(n,".\nObject should match ").concat((0,o.default)(e));return(0,t.FAILURE)(a.Failcode.CONTENT_INCORRECT,i,r)},ARGUMENT_INCORRECT:function(e){return(0,t.FAILURE)(a.Failcode.ARGUMENT_INCORRECT,e)},RETURN_INCORRECT:function(e){return(0,t.FAILURE)(a.Failcode.RETURN_INCORRECT,e)},CONSTRAINT_FAILED:function(e,r){var n=r?": ".concat(r):"";return(0,t.FAILURE)(a.Failcode.CONSTRAINT_FAILED,"Failed constraint check for ".concat((0,o.default)(e)).concat(n))},PROPERTY_MISSING:function(e){var r="Expected ".concat((0,o.default)(e),", but was missing");return(0,t.FAILURE)(a.Failcode.PROPERTY_MISSING,r)},PROPERTY_PRESENT:function(e){var r="Expected nothing, but was ".concat((0,t.typeOf)(e));return(0,t.FAILURE)(a.Failcode.PROPERTY_PRESENT,r)},NOTHING_EXPECTED:function(e){var r="Expected nothing, but was ".concat((0,t.typeOf)(e));return(0,t.FAILURE)(a.Failcode.NOTHING_EXPECTED,r)}})},258:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PushData=void 0;var n=r(167);t.PushData=n.Record({title:n.String,body:n.String,url:n.String,icon:n.Optional(n.String)})},910:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GetVersionRes=t.GetVersionReq=void 0,t.logMessages=function(){console.log("Yeah, messages.ts ;-)")};var n=r(167);t.GetVersionReq=n.Record({type:n.Literal("getVersion")}),t.GetVersionRes=n.Record({type:n.Literal("success"),version:n.Number})}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(()=>{var e=r(910),t=r(258);(0,e.logMessages)(),console.log("Custom service worker functions for pr-newsletter: version=",59),self.addEventListener("fetch",(function(e){var t;e.respondWith((t=e.request,console.log("fetch headers for ",t.url),t.headers.forEach((function(e,t){console.log("request header",t,": ",e)})),console.log("fetch ",t.url,t.cache),fetch(t).then((function(e){if(!e.ok)throw Error("Network response was not ok.");var r=e.clone();return caches.open("my-cache").then((function(n){n.put(t,r),r.headers.forEach((function(e,t){console.log("response header: ",t,":",e)}));var a=r.headers.get("date");if(null!=a){var o=new Date(a);console.log("date as string",a,"hours",o.getHours(),"mins",o.getMinutes(),"secs",o.getSeconds())}else console.warn("date header null!");console.log("typeof date header",typeof a),console.log("RESPONSE url, cache-control, last-modified",r.url,r.headers.get("cache-control"),r.headers.get("last-modified")),console.log("put to cache the response for request",t,"response",e)})),e})).catch((function(){var e=caches.match(t);return e.then((function(e){console.log("response from cache for request",t," - response: ",e)})),e}))).catch((function(){return caches.match(e.request).then((function(t){return t||("navigate"===e.request.mode?caches.match("/offline.html"):void 0)}))})))}));var n=["/","/favicon.ico","/manifest.webmanifest","/newsletterSettings","/overview"];self.addEventListener("install",(function(e){console.log("handling install event"),self.skipWaiting(),e.waitUntil(caches.open("pr-newsletter-cache_v1").then((function(e){return e.addAll(n)})))})),self.addEventListener("notificationclick",(function(e){e.notification.close(),"url"in e.notification.data&&e.waitUntil(self.clients.openWindow(e.notification.data.url))})),self.addEventListener("push",(function(e){var r,n=null===(r=e.data)||void 0===r?void 0:r.json();console.log("received push event with pushData",n);var a=t.PushData.guard(n)?{body:n.body,data:{url:n.url},requireInteraction:!0,silent:!1,icon:n.icon}:{body:"Unexpected push event (pr-webrtc)"},o=t.PushData.guard(n)?n.title:"Fehlerhafte PushMsg",i=self.registration.showNotification(o,a);e.waitUntil(Promise.all([i]))})),self.addEventListener("message",(function(t){if(console.log("received message in service worker (version 59): data",t.data),e.GetVersionReq.guard(t.data)){t.source.postMessage({type:"success",version:59}),console.log("sent response to client")}else console.log("guard failed?!")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,